function () {

    // Get the current state of the HW pin
    var state = this.pin.HW.getState();

    // Check the temperature of the HW thermostat
    if (this.thermostat.HW.temperature > 40) {
        // Hot enough, so switch off regardless of other rules
        if (state === 1) {
            Utils.TRACE("HW", " is ", this.thermostat.HW.temperature,
                          "°C so turning off");
            this.setPin("HW", 0);
            // Purge boost requests (state 2)
            this.pin.HW.purgeRequests(2);
        }
        Utils.TRACE("HW", " is ", this.thermostat.HW.temperature,
                    "°C so leaving off");
        return;
    }

    // See if there's any request from a mobile device or browser,
    // such as boost requests
    var req = this.pin.HW.getActiveRequest();
    if (req) {
        Utils.TRACE("HW", "has active request for ", req.state,
                      " from ", req.source);
        // Use setPin rather than this.pin.set() because setPin handles
        // the interaction between HW and CH in Y-plan systems
        this.setPin("HW", req.state === 0 ? 0 : 1);
        return;
    }

    // Now see if there's any demand from the location of mobile devices
    var at_home = 0, arrive_soon = 0;
    for (var moby in this.mobile) {
        var m = this.mobile[moby];
        Utils.TRACE("HW", "Mobile ", m.name, " arrives in ", m.arrivesIn());
        if (m.arrivesIn() < 5 * 60) {
            // already at home
            Utils.TRACE("HW", "HW ", m.name, " is at home");
            at_home++;
        } else if (m.arrivesIn() < 30 * 60) {
            // 30 minutes away
            Utils.TRACE("HW", m.name, " will arrive in ", m.arrivesIn());
            arrive_soon++;
        }
    }

    if (at_home + arrive_soon === 0) {
        if (state === 1) {
            Utils.TRACE("HW", "no demand, so off");
            this.setPin("HW", 0);
        }
        return;
    }
    
    if (at_home > 0 // someone is at home
        && (Time.between('08:30', '18:00') // day
            || Time.between('20:00', '06:30')) // night
       ) {
        if (state === 1)
            Utils.TRACE("HW", "demand is at home, and out of time band, so off");
        this.setPin("HW", 0);
        return;
    }

    // Demand is away from home, or we are in time band
    if (state === 0 && this.thermostat.HW.temperature < 34) {
        Utils.TRACE("HW", "on");
        this.setPin("HW", 1);
        return;
    }
}
