/*@preserve Copyright (C) 2017-2022 Crawford Currie http://c-dot.co.uk license MIT*/
/*eslint-env browser,node*/

import { Time } from "./Time.js";

/**
 * A sample or value at a point in time.
 */
class TimeValue {

  /**
   * time (epoch ms relative to start of timeline)
   * @member {number}
   */
  time = 0;

  /**
   * Value at this time
   * @member {number}
   */
  value = 0;

  /**
   * @param {object|Date|number|string} time either a prototype object
	 * containing time: and value:, or a date, or a simple number
	 * giving the time in epoch ms. If `time` is an object, `value` is
	 * ignored. If `time` is a number or string, and `value`
	 * is undefined, it will be taken as 0.
	 * Time strings are parsed using {@link Time}.
   */
  constructor(time, value) {
    if (typeof value === 'string') {
      this.value = Number.parseFloat(value);
    } else if (typeof value === "number")
      this.value = value;

    if (typeof time === 'object') {
      if (time instanceof Date)
        this.time = time.getTime();
      else {
			  this.time = Time.parse(time.time);
        this.value = time.value;
      }
    } else if (typeof time === 'string') {
      this.time = Time.parse(time);
    } else if (typeof time === 'number')
      this.time = time;
    else
      throw Error(`Malformed time ${time}`);
  }

  /**
   * Promise to get a serialisable version of the point
   * @return {Promise} Promise resolving to a JSONifiable object
   */
  getSerialisable() {
    const res = {
      time: typeof this.time === "string"
      ? this.time : Time.formatHMS(this.time),
      value: this.value
    };
    return Promise.resolve(res);
  }

  /**
	 * Get a serialisable 1D array of number for an array
	 * of TimeValue.
	 * @param {TimeValue[]} report sample data
   * @param {number} since earliest datime we are interested
   * in, ignore samples before this.
   * @return {Promise} resolves to an array. First element is
   * the base time in epoch ms, subsequent elements are
   * alternating delta times (relative to basetime, in ms) and
	 * sample values.
	 */
	static encodeTrace(report, since) {
		const basetime = report.length > 0
				  ? (report[0].time || 0)
				  : Date.now();
    const res = [basetime];
    for (let i in report) {
      if (typeof since === "undefined"
					|| report[i].time >= since) {
        res.push(report[i].time - basetime);
        res.push(report[i].value);
      }
    }
    return res;
	}

	/**
	 * Decode a 1D-array as generated by {@link #encodeTrace}
	 * @param {number[]} data serialised trace
	 * @return {Timeline.TimeValue[]} array of samples
	 */
	static decodeTrace(data) {
		const points = [];
		const basetime = data[0] || 0; // might be null?
		for (let i = 1; i < data.length; i += 2) {
			points.push(new TimeValue(
        basetime + (data[i] || 0),
        data[i + 1] || 0));
		}
		return points;
	}
}

/**
 * Configuration model of a TimeValue
 */
TimeValue.Model = {
  $class: TimeValue,
  $doc: "a value at a given time",
  time: {
    $unchecked: true,
    $doc: "time"
  },
  value: {
    $class: Number,
    $doc: "value at this time"
  }
};

export { TimeValue }
