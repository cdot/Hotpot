/*@preserve Copyright (C) 2021 Crawford Currie http://c-dot.co.uk license MIT*/

/*eslint-env node */

describe("ScheduledEvent", () => {

  const TS = require("../TestSupport.js");
  after(() => TS.after());
  before(required => TS.before({
    Expectation: "test/Expectation" /* global Expectation */,
    Utils: "js/common/Utils" /* global Utils */,
    DataModel: "js/common/DataModel" /* global DataModel */,
    ScheduledEvent: "js/server/ScheduledEvent" /* global ScheduledEvent */,
    Time: "js/common/Time" /* global Time */
  }, required));

	it("an event in the future", async () => {
		let t = Date.now();
		let e = new Expectation(2);
		let cal = {
			trigger: (id, service, temp, until) => {
				assert.equal(id, "future");
				assert.equal(service, "CH");
				assert.equal(temp, 99);
				assert.equal(until, t + 500);
				e.saw(0);
			},
			remove: (id, service) => {
				assert.equal(id, "future");
				assert.equal(service, "CH");
				e.saw(1);
			}
		};
		let futureevent = new ScheduledEvent(
			cal, "future", t + 250, "CH", 99, t + 500);
		return e.expect();
	});

	it("a live event", () => {
		let t = Date.now();
		let e = new Expectation(2);
		let cal = {
			trigger: (id, service, temp, until) => {
				assert.equal(id, "live");
				assert.equal(service, "HW");
				assert.equal(temp, 9);
				assert.equal(until, t + 250);
				e.saw(0);
			},
			remove: (id, service) => {
				assert.equal(id, "live");
				assert.equal(service, "HW");
				e.saw(1);
			}
		};
		let liveevent = new ScheduledEvent(
			cal, "live", t - 250, "HW", 9, t + 250);
		return e.expect();
	});

	it("a past event", () => {
		let t = Date.now();
		let cal = {
			trigger: (id, service, temp, until) => {
				assert.fail();
			},
			remove: (id, service) => {
				assert.fail();
			}
		};
		let pastevent = new ScheduledEvent(
			cal, "past", t - 2000, "HW", 99, t - 1000);
	});
});

